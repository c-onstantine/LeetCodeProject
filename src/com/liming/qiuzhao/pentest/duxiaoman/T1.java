package com.liming.qiuzhao.pentest.duxiaoman;

import java.util.List;
import java.util.Scanner;

/**
 * @author ltf
 * @date 2022-08-31 18:24
 */
/*
4 2
4 3 2 7
 */
public class T1 {
    private static int res = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        long[] nums = new long[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextLong();
        }
        for (int i = 0; i < nums.length; i++) {
            long max = nums[i];
            long min = nums[i];
            if (k * min == max) {
                res++;
            }
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] > max) {
                    max = nums[j];
                }
                if (nums[j] < min) {
                    min = nums[j];
                }
                if (k * min == max) {
                    res++;
                }
            }
        }
        System.out.println(res);
    }

    private static void dfs(List<Integer> path, int start, int k, int[] nums) {
        if (path.size() > 0 && isstaif(path, k)) {
            res++;
            return;
        }
        for (int i = start; i < nums.length; i++) {
            path.add(nums[i]);
            dfs(path, i + 1, k, nums);
            path.remove(path.size() - 1);
        }
    }

    private static boolean isstaif(List<Integer> path, int k) {
        int max = path.stream().mapToInt((x) -> x.intValue()).max().getAsInt();
        int min = path.stream().mapToInt((x) -> x.intValue()).min().getAsInt();
        return k * min == max;
    }
}
