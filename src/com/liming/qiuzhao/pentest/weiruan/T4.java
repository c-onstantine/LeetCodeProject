package com.liming.qiuzhao.pentest.weiruan;

import java.util.*;

public class T4{

    static Set<Integer> flag = new HashSet<>();
    static Map<Integer,List<Integer>> map = new HashMap<>();

    public static int solution(int[] A, int[] B) {
        // write your code in Java 8 (Java SE 8)
        int n = A.length;
        int a,b;
        for(int i = 0; i < n; ++i){
            a = A[i];
            b = B[i];
            List<Integer> alist = map.getOrDefault(a, new LinkedList<>());
            alist.add(b);
            map.put(a, alist);
            List<Integer> blist = map.getOrDefault(b, new LinkedList<>());
            blist.add(a);
            map.put(b, blist);
        }
        int ans = 0;
        flag.add(0);
        List<Integer> neighbor = map.get(0);
        for(Integer o:neighbor) {
            flag.add(o);
            ans += bfs(o)[1];
        }

        for(int o:map.keySet()){
            System.out.print("#"+o+":");
            for(int oo:map.get(o))
                System.out.print(oo+" ");
            System.out.println();
        }

        return ans;
    }

    public static int[] bfs(int index){
        List<Integer> neighbor = map.get(index);
        int nums = 1, ans = 0;
        boolean temp_flag = false;
        for(int o:neighbor){
            if(flag.contains(o)) continue;
            temp_flag = true;
            flag.add(o);
            int[] ret = bfs(o);
            nums += ret[0];
            ans += ret[1];
        }
        if(!temp_flag) return new int[]{1, 1};
        ans += nums/5;
        ans += nums%5==0 ? 0:1;
        return new int[]{nums, ans};
    }

    public static void main(String[] args) {
        int[] x = {1,1,1,9,9,9,9,7,8};
        int[] y = {2,0,3,1,6,5,4,0,0};
        //int[] x = {0,1,1};
        //int[] y = {1,2,3};
        int ans = solution(x, y);
        System.out.println(ans);
    }

}
