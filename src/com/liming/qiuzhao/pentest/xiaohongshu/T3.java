package com.liming.qiuzhao.pentest.xiaohongshu;

import java.util.*;

/**
 * @author ltf
 * @date 2022-08-28 16:59
 */
/*
6
1 2 2 3 3
 */
public class T3 {


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 1; i < n; i++) {
            int tmp = sc.nextInt();
            graph.get(tmp).add(i + 1);
            graph.get(i + 1).add(tmp);
        }
        int res = 0;
        for (int k = 1; k <= n; k++) {
            Deque<Integer> queue = new ArrayDeque<>();
            queue.offer(k);
            boolean[] vis = new boolean[n + 1];
            vis[k] = true;
            int high = 0;
            while (!queue.isEmpty()) {
                int size = queue.size();

                for (int i = 0; i < size; i++) {
                    Integer poll = queue.poll();
                    List<Integer> list = graph.get(poll);
                    for (Integer j : list) {
                        if (!vis[j]) {
                            vis[j] = true;
                            queue.offer(j);
                        }
                    }
                }
                high++;
            }
            if (high % 2 == 0) {
                res = Math.max(res, high / 2);
            } else {
                res = Math.max(res, high / 2 + 1);

            }
        }
        System.out.println(res);
    }

    //public static void main(String[] args) {
    //    Scanner sc = new Scanner(System.in);
    //    int n = sc.nextInt();
    //    List<List<Integer>> graph = new ArrayList<>();
    //    for (int i = 0; i <= n; i++) {
    //        graph.add(new ArrayList<>());
    //    }
    //    for (int i = 1; i < n; i++) {
    //        int tmp = sc.nextInt();
    //        graph.get(tmp).add(i + 1);
    //        graph.get(i + 1).add(tmp);
    //    }
    //    int res = visTree(graph,1);
    //    System.out.println(res);
    //}

    //private static int visTree(List<List<Integer>> graph, int cur) {
    //    if (graph.get(cur).size() == 0) return 1;
    //    if (visdic.containsKey(cur)) return visdic.get(cur);
    //    // use cur
    //    int val = 1;
    //    // xianglin
    //    List<Integer> list = graph.get(cur);
    //    for (Integer i : list) {
    //        List<Integer> tmpl = graph.get(i);
    //        for (Integer j : tmpl) {
    //            val += visTree(graph, j);
    //        }
    //    }
    //    int v2 = 0;
    //    for (Integer i : list) {
    //        v2 += visTree(graph, i);
    //    }
    //    int res = Math.max(v2, val);
    //    visdic.put(cur, res);
    //    return res;
    //}
}
