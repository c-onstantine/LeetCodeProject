package com.liming.qiuzhao.pentest.bilibili;

import java.util.*;

/**
 * @author ltf
 * @date 2022-09-01 19:31
 */
public class T2 {
    public int maxValue(TreeNode root) {
        // write code here
        if (root == null) return 0;
        if (root.left == null && root.right == null) return root.val;
        if (root.left == null) return Math.max(root.val, root.right.val);
        if (root.right == null) return Math.max(root.val, root.left.val);
        Deque<TreeNode> q1 = new ArrayDeque<>();
        q1.offer(root);
        List<Integer> floorSum = new ArrayList<>();
        while (!q1.isEmpty()) {
            int size = q1.size();
            int sum = 0;
            for (int i = 0; i < size; i++) {
                TreeNode poll = q1.poll();
                sum += poll.val;
                if (poll.left != null) q1.offer(poll.left);
                if (poll.right != null) q1.offer(poll.right);
            }
            floorSum.add(sum);
        }
        Deque<TreeNode> queue = new ArrayDeque<>();
        int res = floorSum.stream().mapToInt((x) -> x.intValue()).max().getAsInt();
        queue.offer(root);
        int index = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode poll = queue.poll();
                if (poll.left != null) {
                    res = Math.max(res,Math.max(floorSum.get(index) - poll.val + poll.left.val, floorSum.get(index + 1) - poll.left.val + poll.val));
                    queue.offer(poll.left);
                }
                if (poll.right != null) {
                    res = Math.max(res,Math.max(floorSum.get(index) - poll.val + poll.right.val, floorSum.get(index + 1) - poll.right.val + poll.val));
                    queue.offer(poll.right);
                }
            }
            index++;
        }
        return res;
    }


    private static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        public TreeNode(int val) {
            this.val = val;
        }
    }

    //{3,2,3,4}
    public static void main(String[] args) {
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        System.out.println(new T2().maxValue(root));
    }
}
