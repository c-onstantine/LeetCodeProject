package com.liming.qiuzhao.pentest.bilibili;

import java.util.*;

/**
 * @author ltf
 * @date 2022-09-01 20:14
 */
public class T3 {
    private List<TreeNode> l = new ArrayList<>();

    public TreeNode[] balanceSubTree(TreeNode root) {
        // write code here
        treeHigh(root);
        l.add(root);
        List<Quanzhi> qz = new ArrayList<>();
        for (TreeNode treeNode : l) {
            qz.add(new Quanzhi(treeNode));
        }
        Collections.sort(qz, (x, y) -> {
            if (x.count != y.count) {
                return x.count - y.count;
            } else {
                return x.val - y.val;
            }
        });
        TreeNode[] res = new TreeNode[qz.size()];
        for (int i = 0; i < qz.size(); i++) {
            res[i] = qz.get(i).node;
        }
        return res;
    }

    private class Quanzhi {
        TreeNode node;
        int count = 0;
        int val;

        public Quanzhi(TreeNode node) {
            this.node = node;
            val = node.val;
            bfs();
        }

        private void bfs() {
            Deque<TreeNode> queue = new ArrayDeque<>();
            queue.offer(node);
            while (!queue.isEmpty()) {
                TreeNode poll = queue.poll();
                count++;
                if (poll.left != null) queue.offer(poll.left);
                if (poll.right != null) queue.offer(poll.right);
            }
        }
    }

    private int treeHigh(TreeNode root) {
        if (root == null) return 0;
        int left = 0;
        int right = 0;
        if (root.left != null) {
            left = treeHigh(root.left);
        }
        if (root.right != null) {
            right = treeHigh(root.right);
        }
        if (Math.abs(left - right) > 1) {
            if (left > right) {
                l.add(root.left);
                root.left = null;
                if (1 + right > 2) {
                    l.add(root.right);
                    root.right = null;
                    return 1;
                }
                return 1 + right;
            } else {
                l.add(root.right);
                root.right = null;
                if (1 + left > 2) {
                    l.add(root.left);
                    root.left = null;
                    return 1;
                }
                return 1 + left;
            }
        }
        return 1 + Math.max(left, right);
    }

    private class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        public TreeNode(int val) {
            this.val = val;
        }
    }

}
